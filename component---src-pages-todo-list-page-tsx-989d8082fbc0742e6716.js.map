{"version":3,"file":"component---src-pages-todo-list-page-tsx-989d8082fbc0742e6716.js","mappings":"mPAkGA,UAxF0CA,KACxC,MAAMC,EACgB,oBAAbC,UACHA,SAASC,SACNC,MAAM,KACNC,QAAQC,GAAMA,IACdC,OACH,IAEA,EAACC,EAAS,EAAEC,IAAgBC,EAAAA,EAAAA,UAAmB,KAC/C,EAACC,EAAW,EAAEC,IAAkBF,EAAAA,EAAAA,UAAS,KACzC,EAACG,EAAQ,EAAEC,IAAeJ,EAAAA,EAAAA,WAAS,IACnC,QAAEK,EAAO,QAAEC,EAAO,WAAEC,EAAU,mBAAEC,IAAuBC,EAAAA,EAAAA,MAE7DC,EAAAA,EAAAA,YAAU,KAEcC,WACpB,IAAKN,EAAS,OACd,MAAMO,QAAaP,EAAQd,GACjB,IAAAsB,EAAND,GACFV,EAAeU,EAAKE,SACpBf,EAAyB,QAAbc,EAACD,EAAKG,eAAO,IAAAF,EAAAA,EAAI,KAE7BT,GAAY,EACd,EAEFY,EAAe,GACd,IAEH,MAMMC,EAAgBC,IACfX,IACLA,EAAWW,EAAO3B,GAClBQ,GAAcoB,GAAOA,EAAGxB,QAAQyB,GAASA,IAASF,MAAO,EAkB3D,OACEG,EAAAA,cAAAA,EAAAA,SAAA,KACGlB,EACCkB,EAAAA,cAAA,QAAMC,UAAU,wCACdD,EAAAA,cAAA,OAAKC,UAAU,kEACbD,EAAAA,cAAA,KAAGE,KAAK,KACNF,EAAAA,cAACG,EAAAA,IAAW,CAACC,KAAK,OAAOH,UAAU,oBAGrCD,EAAAA,cAAA,MAAIC,UAAU,YAAW,YACzBD,EAAAA,cAAA,KAAGC,UAAU,YAAW,qEAI5BD,EAAAA,cAAA,QAAMC,UAAU,gDACdD,EAAAA,cAAA,OAAKC,UAAU,sBACbD,EAAAA,cAACK,EAAAA,GAAkB,CAACC,MAAO1B,EAAa2B,SAAUrC,EAAQsC,OAvBhDC,IACdtB,IACFT,EAAa+B,GACbtB,EAAmBsB,EAAQvC,GAC7B,EAmBsFwC,MAAI,IAClFV,EAAAA,cAACW,EAAAA,GAAe,CAACC,UAhCJC,IACrB,MAAMC,GAASC,EAAAA,EAAAA,GAAYtC,EAAWoC,GAClCC,GAAU3B,IACZA,EAAmB2B,EAAQ5C,GAC3BQ,EAAaoC,GACf,GA4BUd,EAAAA,cAACgB,EAAAA,GAAa,CAACC,gBAAgB,SAC5BxC,GAAaA,EAAUyC,KAAI,CAACC,EAAY5C,IAAMyB,EAAAA,cAACoB,EAAAA,GAAQ,CAACC,IAAKF,EAAYZ,SAAUrC,EAAQiD,WAAYA,EAAYG,MAAO/C,EAAGgD,SAAU3B,QAG5II,EAAAA,cAAA,OAAKC,UAAU,2HAA2HuB,QAjD9HlC,UACpB,IAAKL,EAAS,OACd,MAAMwC,QAAcxC,EAAQf,GAC5BQ,GAAcoB,GAAE,GAAA4B,QAAAC,EAAAA,EAAAA,GAAS7B,GAAE,CAAE2B,KAAO,GA+C1BzB,EAAAA,cAAC4B,EAAAA,IAAQ,CAAC3B,UAAU,uBAK3B,EAMA,MAAM4B,EAAeA,IAAM7B,EAAAA,cAAA,aAAO,Y","sources":["webpack://my-gatsby-site/./src/pages/[TodoListPage].tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Todo, PageHeaderControls, TodoContainer, TodoItem } from \"../components\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport initalData from \"../misc/initalData.ts\";\nimport { IoIosAdd } from \"react-icons/io\";\nimport { moveItemDND } from \"../utils/\";\nimport { useIndexedDB } from \"../context/IndexedDBContext.tsx\";\nimport { TiArrowBack } from \"react-icons/ti\";\n\nconst TodoListPage: React.FC<PageProps> = () => {\n  const todoId =\n    typeof location !== \"undefined\"\n      ? location.pathname\n          .split(\"/\")\n          .filter((i) => i)\n          .pop() || \"\"\n      : \"\";\n  // const todoContent = initalData.todos[todoId] ? initalData.todos[todoId].content : \"Error\";\n  const [todoItems, setTodoItems] = useState<string[]>([]);\n  const [todoContent, setTodoContent] = useState(\"\");\n  const [fallback, setFallback] = useState(false);\n  const { getTodo, addTodo, deleteTodo, updateTodoPosition } = useIndexedDB();\n\n  useEffect(() => {\n    //TODO: Load the ids from I\n    const initTodoItems = async () => {\n      if (!getTodo) return;\n      const todo = await getTodo(todoId);\n      if (todo) {\n        setTodoContent(todo.content);\n        setTodoItems(todo.todoIds ?? []);\n      } else {\n        setFallback(true);\n      }\n    };\n    initTodoItems();\n  }, []);\n\n  const handleAddItem = async () => {\n    if (!addTodo) return;\n    const newId = await addTodo(todoId);\n    setTodoItems((ti) => [...ti, newId]);\n  };\n\n  const handleDelete = (delId: string) => {\n    if (!deleteTodo) return;\n    deleteTodo(delId, todoId);\n    setTodoItems((ti) => ti.filter((item) => item !== delId));\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    const newArr = moveItemDND(todoItems, result);\n    if (newArr && updateTodoPosition) {\n      updateTodoPosition(newArr, todoId);\n      setTodoItems(newArr);\n    }\n  };\n\n  const handleSort = (newIds: string[]) => {\n    if (updateTodoPosition) {\n      setTodoItems(newIds);\n      updateTodoPosition(newIds, todoId);\n    }\n  };\n\n  return (\n    <>\n      {fallback ? (\n        <main className=\"mt-one min-h-two flex justify-center\">\n          <div className=\"border border-4 pt-med border-red-600 p-small bg-red-50 shadow\">\n            <a href=\"/\">\n              <TiArrowBack size=\"2rem\" className=\"cursor-pointer\" />\n              {/* <span className=\"text-blue-600 underline\">back</span> */}\n            </a>\n            <h1 className=\"text-one\">Oh no...</h1>\n            <p className=\"text-med\">It appears that the \"To Do\" you're looking for does not exist.</p>\n          </div>\n        </main>\n      ) : (\n        <main className=\"mt-large lg:mt-one px-2xsmall lg:px-0 w-full\">\n          <div className=\"mx-auto max-w-four\">\n            <PageHeaderControls title={todoContent} parentId={todoId} onSort={handleSort} back />\n            <DragDropContext onDragEnd={handleDragEnd}>\n              <TodoContainer todoContainerId=\"index\">\n                {todoItems && todoItems.map((todoItemId, i) => <TodoItem key={todoItemId} parentId={todoId} todoItemId={todoItemId} index={i} onDelete={handleDelete} />)}\n              </TodoContainer>\n            </DragDropContext>\n            <div className=\"max-w-four mt-2xsmall add-btn-style flex items-center justify-center h-small cursor-pointer opacity-80 hover:opacity-100\" onClick={handleAddItem}>\n              <IoIosAdd className=\"w-small h-small\" />\n            </div>\n          </div>\n        </main>\n      )}\n    </>\n  );\n};\n\nexport default TodoListPage;\n\nexport const Head: HeadFC = () => <title>Todo List</title>;\n"],"names":["TodoListPage","todoId","location","pathname","split","filter","i","pop","todoItems","setTodoItems","useState","todoContent","setTodoContent","fallback","setFallback","getTodo","addTodo","deleteTodo","updateTodoPosition","useIndexedDB","useEffect","async","todo","_todo$todoIds","content","todoIds","initTodoItems","handleDelete","delId","ti","item","React","className","href","TiArrowBack","size","PageHeaderControls","title","parentId","onSort","newIds","back","DragDropContext","onDragEnd","result","newArr","moveItemDND","TodoContainer","todoContainerId","map","todoItemId","TodoItem","key","index","onDelete","onClick","newId","concat","_toConsumableArray","IoIosAdd","Head"],"sourceRoot":""}